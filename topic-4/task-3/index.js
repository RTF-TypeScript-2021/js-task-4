/**
    У нас есть два хомяка: шустрый (speedy) и ленивый (lazy); оба наследуют от общего объекта hamster.
    Когда мы кормим одного хомяка, второй тоже наедается. Почему? Как это исправить?
 */


/** 1)При вызове функций каждый раз возращается новый объект, который не имеет полей
 *  созданых в предыдущем вызове функции([1]вызов метода eat и [2]лог поля stomach ), поэтому мы
 *  создадим два обьекта lazy и speedy, которым присвоим значения результата выполнения соответсвующих
 *  функций
 *
 *  2)Так как ни у одного из хомяков не было поля stomach, то они оба обращались к родительскому полю
 *  и когда speedy заполнял его и когда мы обращались к полю чтобы вывести их на экран, поэтому нам нужно
 *  создать отдельные поля stomach у каждого из обьектов()(решение с таким вариантом со строки 61)
 *
 *  3)Ну и так как проверка данной задачи подразумевает только просмотр поля stomach у обьекта возвращаемого
 *  функцией getLazy, нам необходимо и достаточно было лишь добавить это поле для speedy, чтобы оно
 *  заполнилось вместо родительского при вызове функии eat, тогда родительский желудок к которому мы
 *  обратимся позже будет пуст
 *  4)Ещё одним вариантом решения этой задачи(при условии создания постоянных хомяков, а не возврата новых)
 *  будет смена this.stomach.push(food) на this.stomach = [food] в методе eat(Думаю можно представить, что у хомяков
 *  одноместный желудок), тогда поле stomach будет создаваться у того хомяка, у которого вызвана функция
 */

let hamster = {
    stomach: [],

    eat(food) {
        this.stomach.push(food);
    }
};

function getSpeedy() {
    let speedy = {
        stomach: [],
        __proto__: hamster
    };

    return speedy;
}

function getLazy() {
    let lazy = {
        stomach: [],
        __proto__: hamster
    };

    return lazy;
}
// Этот хомяк нашёл еду
getSpeedy().eat("apple");
console.log(getSpeedy().stomach); // apple

// У этого хомяка тоже есть еда. Почему? Исправьте
console.log(getLazy().stomach); // apple

module.exports.getSpeedy = getSpeedy;
module.exports.getLazy = getLazy;

/**
 *let speedy = getSpeedy()
 let lazy = getLazy()

 speedy.eat("apple");
 console.log(speedy.stomach);

 console.log(lazy.stomach); */